package com.example.food_court_ms_small_square.infrastructure.input.rest;

import com.example.food_court_ms_small_square.application.dto.request.OrderDishRequestDto;
import com.example.food_court_ms_small_square.application.dto.request.OrderRequestDto;
import com.example.food_court_ms_small_square.application.dto.request.PinRequestDto;
import com.example.food_court_ms_small_square.application.dto.response.OrderResponseDto;
import com.example.food_court_ms_small_square.application.dto.response.PageResponseDto;
import com.example.food_court_ms_small_square.application.handler.impl.OrderHandler;
import jakarta.persistence.EntityNotFoundException;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@SpringBootTest
public class OrderRestControllerTest {

    @Mock
    private OrderHandler orderHandler;

    @InjectMocks
    private OrderRestController orderRestController;

    @Test
    public void valid_order_request_returns_created_status() {
        // Arrange
        OrderRequestDto orderRequestDto = new OrderRequestDto();
        orderRequestDto.setNitRestaurante("123456789");
        orderRequestDto.setPlatos(Arrays.asList(new OrderDishRequestDto()));

        OrderResponseDto expectedResponse = new OrderResponseDto();
        expectedResponse.setId(1L);
        expectedResponse.setEstado("PENDING");

        when(orderHandler.saveOrder(any(OrderRequestDto.class))).thenReturn(expectedResponse);

        // Act
        ResponseEntity<OrderResponseDto> response = orderRestController.saveOrder(orderRequestDto);

        // Assert
        assertEquals(HttpStatus.CREATED, response.getStatusCode());
        assertNotNull(response.getBody());
        verify(orderHandler).saveOrder(orderRequestDto);
    }

    @Test
    public void test_list_orders_with_default_pagination() {
        // Arrange
        OrderResponseDto orderResponse = new OrderResponseDto();
        List<OrderResponseDto> orderList = List.of(orderResponse);
        PageResponseDto<OrderResponseDto> expectedPage = new PageResponseDto<>(orderList, 1, 1);

        when(orderHandler.listOrdersByFilters(null, 0, 10)).thenReturn(expectedPage);

        // Act
        ResponseEntity<PageResponseDto<OrderResponseDto>> response = orderRestController.listOrders(null, 0, 10);

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(expectedPage, response.getBody());
        verify(orderHandler).listOrdersByFilters(null, 0, 10);
    }

    @Test
    public void test_list_orders_with_null_status() {
        // Arrange
        OrderResponseDto orderResponse = new OrderResponseDto();
        List<OrderResponseDto> orderList = List.of(orderResponse);
        PageResponseDto<OrderResponseDto> expectedPage = new PageResponseDto<>(orderList, 1, 1);
        String emptyStatus = null;

        when(orderHandler.listOrdersByFilters(emptyStatus, 0, 10)).thenReturn(expectedPage);

        // Act
        ResponseEntity<PageResponseDto<OrderResponseDto>> response = orderRestController.listOrders(emptyStatus, 0, 10);

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals(expectedPage.getContent(), response.getBody().getContent());
        verify(orderHandler).listOrdersByFilters(emptyStatus, 0, 10);
    }

    @Test
    public void test_assign_order_success() {
        // Arrange
        Long orderId = 1L;
        OrderResponseDto expectedResponse = new OrderResponseDto();
        expectedResponse.setId(orderId);
        expectedResponse.setEstado("LISTO");

        when(orderHandler.assignOrder(orderId)).thenReturn(expectedResponse);

        // Act
        ResponseEntity<OrderResponseDto> response = orderRestController.assignOrder(orderId);

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals(orderId, response.getBody().getId());
        verify(orderHandler).assignOrder(orderId);
    }

    @Test
    public void test_employee_successfully_marks_order_ready() {
        // Arrange
        Long orderId = 1L;
        OrderResponseDto expectedResponse = new OrderResponseDto();
        expectedResponse.setId(orderId);
        expectedResponse.setEstado("READY");

        when(orderHandler.readyOrder(orderId)).thenReturn(expectedResponse);

        // Act
        ResponseEntity<OrderResponseDto> response = orderRestController.readyOrder(orderId);

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(expectedResponse, response.getBody());
        verify(orderHandler).readyOrder(orderId);
    }

    @Test
    public void test_mark_nonexistent_order_ready() {
        // Arrange
        Long nonExistentOrderId = 999L;
        when(orderHandler.readyOrder(nonExistentOrderId))
                .thenThrow(new EntityNotFoundException("Order not found with id: " + nonExistentOrderId));

        // Act & Assert
        assertThrows(EntityNotFoundException.class, () -> {
            orderRestController.readyOrder(nonExistentOrderId);
        });
        verify(orderHandler).readyOrder(nonExistentOrderId);
    }

    @Test
    public void test_deliver_order_success() {
        // Arrange
        Long orderId = 1L;
        String pin = "1234";
        PinRequestDto pinRequestDto = new PinRequestDto(pin);

        OrderResponseDto expectedResponse = new OrderResponseDto();
        expectedResponse.setId(orderId);
        expectedResponse.setEstado("DELIVERED");
        expectedResponse.setPin(pin);

        when(orderHandler.deliveredOrder(orderId, pin)).thenReturn(expectedResponse);

        // Act
        ResponseEntity<OrderResponseDto> response = orderRestController.deliveredOrder(orderId, pinRequestDto);

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(expectedResponse, response.getBody());
        verify(orderHandler).deliveredOrder(orderId, pin);
    }

    @Test
    public void test_cancel_order_success() {
        // Arrange
        Long orderId = 1L;
        OrderRestController orderRestController = new OrderRestController(orderHandler);

        doNothing().when(orderHandler).cancelOrder(orderId);

        // Act
        ResponseEntity<Void> response = orderRestController.cancelOrder(orderId);

        // Assert
        assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());
        verify(orderHandler, times(1)).cancelOrder(orderId);
    }
}
